
# makefile-include of swooz-teleoperation project using Visual C++
# Guillaume Gibert / Florian Lance
# lyon sept 2013

################################################################################################################# DEBUG/RELEASE MODE

############################ DOC CL OPTIONS

# -MTd   : Creates a debug multithreaded executable file, No need to define _DEBUG, compiler does it for us if -MTd flag is on
# -DGSL_RANGE_CHECK : tells the mat lib to do range checking
# -Zi    : Generates complete debugging information
# -nolog : In brief, the positive form suppresses the logo at startup and the negative form makes explicit that this suppression is not wanted. However, there are some other effects. 
# -O2 	 : Creates fast code
# -W3 	 : Sets warning level
# -MT 	 : Causes your application to use the multithread, static version of the run-time library. 
#     	   Defines _MT and causes the compiler to place the library name LIBCMT.lib into the .obj file 
#     	   so that the linker will use LIBCMT.lib to resolve external symbols.
# -MD 	 : Causes your application to use the multithread- and DLL-specific version of the run-time library
#     	   Defines _MT and _DLL and causes the compiler to place the library name MSVCRT.lib into the .obj file.
#    	   Applications compiled with this option are statically linked to MSVCRT.lib. 
#     	   This library provides a layer of code that allows the linker to resolve external references. 
#     	   The actual working code is contained in MSVCR100.DLL, which must be available at run time to applications linked with MSVCRT.lib.
# -GF 	 : enable string pooling
# -Gy 	 : enable function-level linking
# -EHsc  : exception model to use : /EHsc -> intercept only C++ exceptions, extern C functions never launch C++ exception.
# 	   object files go to -Fo 


############################ WIN LIB

WINLIBS=advapi32.lib comctl32.lib comdlg32.lib gdi32.lib shell32.lib user32.lib vfw32.lib winmm.lib

############################ DIRECTORIES

# define lib dir

LIBDIR  =./lib
DIST_LIBDIR = $(SW_DIST)/lib

!if  "$(ARCH)" == "x86"
LIBDIR= $(LIBDIR)/x86
DIST_LIBDIR = $(DIST_LIBDIR)/x86
!endif

!if  "$(ARCH)" == "amd64"
LIBDIR= $(LIBDIR)/amd64
DIST_LIBDIR = $(DIST_LIBDIR)/amd64
!endif

!if  "$(CFG)" == "Release"
LIBDIR= $(LIBDIR)/Release
DIST_LIBDIR = $(DIST_LIBDIR)/Release
!endif

!if  "$(CFG)" == "Debug"
LIBDIR= $(LIBDIR)/Debug
DIST_LIBDIR = $(DIST_LIBDIR)/Debug
!endif


# others dir

BINDIR=./bin


############################ SET UP FOR THE WANTED ARCH

# We include setargv.obj for executables that do command line filename globbing.
# PROGRAMFILES is inherited from the shell evironment (where it is
# called ProgramFiles, but nmake converts it to upper case).  This allows us
# to work with systems that use \Program Files or \Program Files x86.
# we include binmode.obj so files are opened as _O_BINARY, for compat with unix

SETARGV = "$(VS100COMNTOOLS)/../../VC/lib/setargv.obj"
BINMODE = "$(VS100COMNTOOLS)/../../VC/lib/binmode.obj"

!IF "$(ARCH)" != "x86"
SETARGV = "$(VS100COMNTOOLS)/../../VC/lib/amd64/setargv.obj"
BINMODE = "$(VS100COMNTOOLS)/../../VC/lib/amd64/binmode.obj"

THIRD_PARTY_YARP      = $(THIRD_PARTY_YARP_64)
!ENDIF

############################ INCLUDES

INC_TELEOPERATION   = -I.\include

INC_OTHERS          = -I$(SW_DIST)\include

INC_VS              = -I"$(PROGRAMFILES)/Microsoft SDKs/Windows/v7.0A/Include"\ -I"$(VS100COMNTOOLS)/../../VC/include"\

INC_YARP            = -I"$(THIRD_PARTY_YARP)"\include

INC_NAO             = -I"$(THIRD_PARTY_NAOQI)"\include
	
############################ DEPENDENCIES

COMMON              = $(INC_TELEOPERATION) $(INC_OTHERS) $(INC_VS)

SW_TELE_ICUB        = $(COMMON) $(INC_YARP)

SW_TELE_NAO  = $(COMMON) $(INC_NAO) $(INC_YARP)

############################ COMMON DEBUG/RELEASE LIBS

LIBS_COMMON	=
#"$(PROGRAMFILES)\Microsoft SDKs\Windows\v7.0A\Lib\ws2_32.lib"

################################################################################################################# RELEASE MODE

!IF  "$(CFG)" == "Release"

############################ FLAGS

CFLAGS_STA = -nologo -O2 -GF -Gy -W3 -MT -EHsc -DWIN32 -MP$(NUMBER_OF_PROCESSORS)
CFLAGS_DYN = -nologo -O2 -GF -Gy -W3 -MD -EHsc -DWIN32 -MP$(NUMBER_OF_PROCESSORS)

LFLAGS=-nologo

############################ LIBS

LIBS_YARP           =   $(THIRD_PARTY_YARP)/lib/YARP_sig.lib\
                        $(THIRD_PARTY_YARP)/lib/YARP_OS.lib\
                        $(THIRD_PARTY_YARP)/lib/YARP_dev.lib\
                        $(THIRD_PARTY_YARP)/lib/YARP_init.lib\
                        $(THIRD_PARTY_YARP)/lib/YARP_math.lib\
                        $(THIRD_PARTY_YARP)/lib/yarpcar.lib\
                        $(THIRD_PARTY_YARP)/lib/yarp_bayer.lib
					
LIBS_ACE            =   $(THIRD_PARTY_ACE)/lib/ACE.lib

LIBS_NAO    =   $(THIRD_PARTY_NAOQI)\lib\pthreadVC2.lib\
                $(THIRD_PARTY_NAOQI)\lib\pthreadVCE2.lib\
                $(THIRD_PARTY_NAOQI)\lib\libboost_signals-vc100-mt-1_47.lib\
                $(THIRD_PARTY_NAOQI)\lib\libboost_system-vc100-mt-1_47.lib\
                $(THIRD_PARTY_NAOQI)\lib\tinyxml.lib\
                $(THIRD_PARTY_NAOQI)\lib\libboost_filesystem-vc100-mt-1_47.lib\
                $(THIRD_PARTY_NAOQI)\lib\rttools.lib\
                $(THIRD_PARTY_NAOQI)\lib\qi.lib\
                $(THIRD_PARTY_NAOQI)\lib\alerror.lib\
                $(THIRD_PARTY_NAOQI)\lib\alcommon.lib\
                $(THIRD_PARTY_NAOQI)\lib\alvalue.lib\
                $(THIRD_PARTY_NAOQI)\lib\alproxies.lib\
                $(THIRD_PARTY_NAOQI)\lib\alextractor.lib\
                $(THIRD_PARTY_NAOQI)\lib\alfile.lib\
                $(THIRD_PARTY_NAOQI)\lib\allauncher.lib\
                $(THIRD_PARTY_NAOQI)\lib\allogremote.lib\
                $(THIRD_PARTY_NAOQI)\lib\almath.lib\
                $(THIRD_PARTY_NAOQI)\lib\almemoryfastaccess.lib\
                $(THIRD_PARTY_NAOQI)\lib\alparammanager.lib\
                $(THIRD_PARTY_NAOQI)\lib\alproject.lib\
                $(THIRD_PARTY_NAOQI)\lib\alremotecall.lib\
                $(THIRD_PARTY_NAOQI)\lib\alserial.lib\
                $(THIRD_PARTY_NAOQI)\lib\alsoap.lib\
                $(THIRD_PARTY_NAOQI)\lib\althread.lib\
                $(THIRD_PARTY_NAOQI)\lib\altools.lib\
                $(THIRD_PARTY_NAOQI)\lib\alvision.lib\

#$(THIRD_PARTY_NAOQI)\lib\libboost_date_time-vc100-mt-1_47.lib\
#$(THIRD_PARTY_NAOQI)\lib\libboost_prg_exec_monitor-vc100-mt-1_47.lib\
#$(THIRD_PARTY_NAOQI)\lib\libboost_program_options-vc100-mt-1_47.lib\
#$(THIRD_PARTY_NAOQI)\lib\libboost_python-vc100-mt-1_47.lib\
# $(THIRD_PARTY_NAOQI)\lib\libboost_regex-vc100-mt-1_47.lib\
#$(THIRD_PARTY_NAOQI)\lib\libboost_wserialization-vc100-mt-1_47.lib\
#$(THIRD_PARTY_NAOQI)\lib\libboost_thread-vc100-mt-1_47.lib\
#$(THIRD_PARTY_NAOQI)\lib\libboost_bzip2-vc100-mt-1_47.lib\
#                $(THIRD_PARTY_NAOQI)\lib\libboost_serialization-vc100-mt-1_47.lib\
#                $(THIRD_PARTY_NAOQI)\lib\libboost_zlib-vc100-mt-1_47.lib\
#
#$(THIRD_PARTY_NAOQI)\lib\alaudio.lib\

LIBS_GSL=   $(THIRD_PARTY_GSL)/lib/gsl.lib\
            $(THIRD_PARTY_GSL)/lib/gslcblas.lib


LIBS_TELEOP_ICUB    =   $(LIBS_YARP)  $(LIBS_ACE)  $(LIBS_COMMON)

LIBS_TELEOP_NAO = $(LIBS_COMMON) $(LIBS_NAO) $(LIBS_YARP) $(LIBS_ACE)

# $(LIBS_GSL)

!ENDIF

################################################################################################################# DEBUG MODE
# TODO : complete

!IF  "$(CFG)" == "Debug"

############################ FLAGS

CFLAGS_STA = -nologo -Zi -W3 -MTd -EHsc -DWIN32
CFLAGS_DYN = -nologo -Zi -W3 -MDd -EHsc -DWIN32

LFLAGS=-nologo

############################ LIBS

LIBS_YARP       =   $(THIRD_PARTY_YARP)/lib/YARP_sigd.lib\
                    $(THIRD_PARTY_YARP)/lib/YARP_OSd.lib\
                    $(THIRD_PARTY_YARP)/lib/YARP_devd.lib\
                    $(THIRD_PARTY_YARP)/lib/YARP_initd.lib\
                    $(THIRD_PARTY_YARP)/lib/YARP_mathd.lib\
                    $(THIRD_PARTY_YARP)/lib/yarpcard.lib\
                    $(THIRD_PARTY_YARP)/lib/yarp_bayerd.lib
					
LIBS_ACE        =   $(THIRD_PARTY_ACE)/lib/ACEd.lib
					
LIBS_HEAD_ICUB	=   $(LIBS_YARP) $(LIBS_ACE) $(LIBS_COMMON)

	

!ENDIF

